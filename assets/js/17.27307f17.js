(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{203:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"网络请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[t._v("#")]),t._v(" 网络请求")]),t._v(" "),a("p",[t._v("受益于 Vue 带来的前端和服务端分离的开发模式，我们可以更加关注如何利用数据来渲染页面。前端只需要编写 API，通过 API 向服务端发起请求来获取数据并展示。做这件事的方法有好几种，而使用基于 promise 的 HTTP 客户端 "),a("a",{attrs:{href:"https://github.com/axios/axios",target:"_blank",rel:"noopener noreferrer"}},[t._v("axios"),a("OutboundLink")],1),t._v(" 则是其中非常流行的一种。")]),t._v(" "),a("h3",{attrs:{id:"封装-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装-api"}},[t._v("#")]),t._v(" 封装 API")]),t._v(" "),a("p",[t._v("使用 axios 我们可以很轻松地设置 "),a("code",[t._v("拦截器")]),t._v("、"),a("code",[t._v("错误处理")]),t._v("、"),a("code",[t._v("超时处理")]),t._v(" 等功能。为了对接口进行统一的处理，在 "),a("code",[t._v("@/plugins/axios.js")]),t._v(" 文件中我们创建了一个唯一的 axios 实例并将其导出。接下来，我们就可以通过引入 axios 实例来创建接口函数，像这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" request "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@/plugins/axios'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUserInfo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("params")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("request")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/user/info'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    method"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    params"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("所有的接口都被放在 "),a("code",[t._v("@/api")]),t._v(" 下，按模块组织。")]),t._v(" "),a("h3",{attrs:{id:"模拟请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模拟请求"}},[t._v("#")]),t._v(" 模拟请求")])])}),[],!1,null,null,null);s.default=r.exports}}]);